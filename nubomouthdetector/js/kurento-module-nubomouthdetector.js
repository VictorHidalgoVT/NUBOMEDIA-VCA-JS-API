require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var disguise = kurentoClient.disguise;

var checkType      = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;


var Transaction = kurentoClient.TransactionsManager.Transaction;

var Filter = kurentoClient.register.abstracts.Filter;


function noop(error, result) {
  if (error) console.trace(error);

  return result
};


/**
 * Create an element
 *
 * @classdesc
 *  NuboMouthDetector interface. Documentation about the module
 *
 * @extends module:core/abstracts.Filter
 *
 * @constructor module:nubomouthdetector.NuboMouthDetector
 *
 * @fires {@link module:nubomouthdetector#event:OnMouth OnMouth}
 */
function NuboMouthDetector(){
  NuboMouthDetector.super_.call(this);
};
inherits(NuboMouthDetector, Filter);


//
// Public methods
//

/**
 * The events will be launched to the server with the information about the 
 * mouth detected.  milliseconds indicate the frequency with which events will 
 * be launched (0 millisecons => an event will be lauched, when there is some 
 * information
 *
 * @alias module:nubomouthdetector.NuboMouthDetector.activateServerEvents
 *
 * @param {external:Integer} activate
 *  1=>activate it, 0 desactivated
 *
 * @param {external:Integer} time
 *  the frequency in ms to send the events
 *
 * @param {module:nubomouthdetector.NuboMouthDetector~activateServerEventsCallback} [callback]
 *
 * @return {external:Promise}
 */
NuboMouthDetector.prototype.activateServerEvents = function(activate, time, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'activate', activate, {required: true});
  checkType('int', 'time', time, {required: true});

  var params = {
    activate: activate,
    time: time
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'activateServerEvents', params, callback), this)
};
/**
 * @callback module:nubomouthdetector.NuboMouthDetector~activateServerEventsCallback
 * @param {external:Error} error
 */

/**
 * To indicate  the algorithm if process all the images or only when it receives
 *
 * @alias module:nubomouthdetector.NuboMouthDetector.detectByEvent
 *
 * @param {external:Integer} event
 *  0 (default) => process all the frames without constraints; 1 => process only
 *
 * @param {module:nubomouthdetector.NuboMouthDetector~detectByEventCallback} [callback]
 *
 * @return {external:Promise}
 */
NuboMouthDetector.prototype.detectByEvent = function(event, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'event', event, {required: true});

  var params = {
    event: event
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'detectByEvent', params, callback), this)
};
/**
 * @callback module:nubomouthdetector.NuboMouthDetector~detectByEventCallback
 * @param {external:Error} error
 */

/**
 * Specify how much the image size is reduced at each haar image 
 *
 * @alias module:nubomouthdetector.NuboMouthDetector.multiScaleFactor
 *
 * @param {external:Integer} scaleFactor
 *  5-50 (25 default)
 *
 * @param {module:nubomouthdetector.NuboMouthDetector~multiScaleFactorCallback} [callback]
 *
 * @return {external:Promise}
 */
NuboMouthDetector.prototype.multiScaleFactor = function(scaleFactor, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'scaleFactor', scaleFactor, {required: true});

  var params = {
    scaleFactor: scaleFactor
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'multiScaleFactor', params, callback), this)
};
/**
 * @callback module:nubomouthdetector.NuboMouthDetector~multiScaleFactorCallback
 * @param {external:Error} error
 */

/**
 * process x frames every 4 frames
 *
 * @alias module:nubomouthdetector.NuboMouthDetector.processXevery4Frames
 *
 * @param {external:Integer} xper4
 *  1,2,3,4 (default) => process x frames every 4 frames
 *
 * @param {module:nubomouthdetector.NuboMouthDetector~processXevery4FramesCallback} [callback]
 *
 * @return {external:Promise}
 */
NuboMouthDetector.prototype.processXevery4Frames = function(xper4, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'xper4', xper4, {required: true});

  var params = {
    xper4: xper4
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'processXevery4Frames', params, callback), this)
};
/**
 * @callback module:nubomouthdetector.NuboMouthDetector~processXevery4FramesCallback
 * @param {external:Error} error
 */

/**
 * The mouths  detected (x,y,width,height) are sent as metadata 
 *
 * @alias module:nubomouthdetector.NuboMouthDetector.sendMetaData
 *
 * @param {external:Integer} metaData
 *  0 (default) => metadata are not sent; 1 => metadata are sent
 *
 * @param {module:nubomouthdetector.NuboMouthDetector~sendMetaDataCallback} [callback]
 *
 * @return {external:Promise}
 */
NuboMouthDetector.prototype.sendMetaData = function(metaData, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'metaData', metaData, {required: true});

  var params = {
    metaData: metaData
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'sendMetaData', params, callback), this)
};
/**
 * @callback module:nubomouthdetector.NuboMouthDetector~sendMetaDataCallback
 * @param {external:Error} error
 */

/**
 * Show or Hide the mouts in the video stream
 *
 * @alias module:nubomouthdetector.NuboMouthDetector.showMouths
 *
 * @param {external:Integer} viewMouths
 *  Determines wheter the detected mouths will be displayed or not
 *
 * @param {module:nubomouthdetector.NuboMouthDetector~showMouthsCallback} [callback]
 *
 * @return {external:Promise}
 */
NuboMouthDetector.prototype.showMouths = function(viewMouths, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'viewMouths', viewMouths, {required: true});

  var params = {
    viewMouths: viewMouths
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'showMouths', params, callback), this)
};
/**
 * @callback module:nubomouthdetector.NuboMouthDetector~showMouthsCallback
 * @param {external:Error} error
 */

/**
 * this will be the width of the image that the algorithm is going to process to
 *
 * @alias module:nubomouthdetector.NuboMouthDetector.widthToProcess
 *
 * @param {external:Integer} width
 *  160,320 (default),480,640
 *
 * @param {module:nubomouthdetector.NuboMouthDetector~widthToProcessCallback} [callback]
 *
 * @return {external:Promise}
 */
NuboMouthDetector.prototype.widthToProcess = function(width, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'width', width, {required: true});

  var params = {
    width: width
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'widthToProcess', params, callback), this)
};
/**
 * @callback module:nubomouthdetector.NuboMouthDetector~widthToProcessCallback
 * @param {external:Error} error
 */


/**
 * @alias module:nubomouthdetector.NuboMouthDetector.constructorParams
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the parent {@link module:core.MediaPipeline MediaPipeline}
 */
NuboMouthDetector.constructorParams = {
  mediaPipeline: {
    type: 'kurento.MediaPipeline',
    required: true
  }
};

/**
 * @alias module:nubomouthdetector.NuboMouthDetector.events
 *
 * @extends module:core/abstracts.Filter.events
 */
NuboMouthDetector.events = Filter.events.concat(['OnMouth']);


/**
 * Checker for {@link module:nubomouthdetector.NuboMouthDetector}
 *
 * @memberof module:nubomouthdetector
 *
 * @param {external:String} key
 * @param {module:nubomouthdetector.NuboMouthDetector} value
 */
function checkNuboMouthDetector(key, value)
{
  if(!(value instanceof NuboMouthDetector))
    throw ChecktypeError(key, NuboMouthDetector, value);
};


module.exports = NuboMouthDetector;

NuboMouthDetector.check = checkNuboMouthDetector;

},{"inherits":"inherits","kurento-client":"kurento-client"}],2:[function(require,module,exports){
/**
 * Loader for the kurento-module-nubomouthdetector package on the browser
 */

require('.');

},{".":"kurento-module-nubomouthdetector"}],3:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var checkType = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;

var ComplexType = kurentoClient.register.complexTypes.ComplexType;


/**
 * MouthInfo contains information about the detected mouth
 *
 * @constructor module:nubomouthdetector/complexTypes.MouthInfo
 *
 * @property {external:String} name
 *  This value contains the word mouth in order to identify the register
 * @property {external:Integer} x
 *  represent the x value of the upper left corner of the mouth 
 * @property {external:Integer} y
 *  represent the y value of the upper left corner of the mouth 
 * @property {external:Integer} height
 *  Represent the height of the detected mouth
 * @property {external:Integer} width
 *  Represent the width of the detected mouth
 */
function MouthInfo(mouthInfoDict){
  if(!(this instanceof MouthInfo))
    return new MouthInfo(mouthInfoDict)

  mouthInfoDict = mouthInfoDict || {}

  // Check mouthInfoDict has the required fields
  checkType('String', 'mouthInfoDict.name', mouthInfoDict.name, {required: true});
  checkType('int', 'mouthInfoDict.x', mouthInfoDict.x, {required: true});
  checkType('int', 'mouthInfoDict.y', mouthInfoDict.y, {required: true});
  checkType('int', 'mouthInfoDict.height', mouthInfoDict.height, {required: true});
  checkType('int', 'mouthInfoDict.width', mouthInfoDict.width, {required: true});

  // Init parent class
  MouthInfo.super_.call(this, mouthInfoDict)

  // Set object properties
  Object.defineProperties(this, {
    name: {
      writable: true,
      enumerable: true,
      value: mouthInfoDict.name
    },
    x: {
      writable: true,
      enumerable: true,
      value: mouthInfoDict.x
    },
    y: {
      writable: true,
      enumerable: true,
      value: mouthInfoDict.y
    },
    height: {
      writable: true,
      enumerable: true,
      value: mouthInfoDict.height
    },
    width: {
      writable: true,
      enumerable: true,
      value: mouthInfoDict.width
    }
  })
}
inherits(MouthInfo, ComplexType)

// Private identifiers to allow re-construction of the complexType on the server
// They need to be enumerable so JSON.stringify() can access to them
Object.defineProperties(MouthInfo.prototype, {
  __module__: {
    enumerable: true,
    value: "nubomouthdetector"
  },
  __type__: {
    enumerable: true,
    value: "MouthInfo"
  }
})

/**
 * Checker for {@link module:nubomouthdetector/complexTypes.MouthInfo}
 *
 * @memberof module:nubomouthdetector/complexTypes
 *
 * @param {external:String} key
 * @param {module:nubomouthdetector/complexTypes.MouthInfo} value
 */
function checkMouthInfo(key, value)
{
  if(!(value instanceof MouthInfo))
    throw ChecktypeError(key, MouthInfo, value);
};


module.exports = MouthInfo;

MouthInfo.check = checkMouthInfo;

},{"inherits":"inherits","kurento-client":"kurento-client"}],4:[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Media API for the Kurento Web SDK
 *
 * @module nubomouthdetector/complexTypes
 *
 * @copyright 2013-2015 Kurento (http://kurento.org/)
 * @license ALv2
 */

var MouthInfo = require('./MouthInfo');


exports.MouthInfo = MouthInfo;

},{"./MouthInfo":3}],"kurento-module-nubomouthdetector":[function(require,module,exports){
/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Media API for the Kurento Web SDK
 *
 * @module nubomouthdetector
 *
 * @copyright 2013-2015 Kurento (http://kurento.org/)
 * @license ALv2
 */

Object.defineProperty(exports, 'name',    {value: 'nubomouthdetector'});
Object.defineProperty(exports, 'version', {value: '6.5.0'});


var NuboMouthDetector = require('./NuboMouthDetector');


exports.NuboMouthDetector = NuboMouthDetector;

exports.complexTypes = require('./complexTypes');

},{"./NuboMouthDetector":1,"./complexTypes":4}]},{},[2]);
